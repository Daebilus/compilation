
programme -> optDecVariables listeDecFonctions
  programme.s = optDecVariables.s || listeDecFonctions.s

optDecVariables -> listeDecVariables ';'
  optDecVariables.s = listeDecVariables.s

optDecVariables -> EPSILON
  optDecVariables.s = NULL;

listeDecVariables -> declarationVariable listeDecVariableBis
  declarationVariable.s = declarationVariable.s || listeDecVariableBis.s

listeDecVariableBis -> declarationVariable listeDecVariableBis
  listeDecVariableBis.s = declarationVariable.s || listeDecVariableBis.s

listeDecVariableBis -> EPSILON
    listeDecVariableBis.s = NULL

declarationVariable -> ENTIER ID_VAR optTailleTableau
  declarationVariable.s = optTailleTableau.s

optTailleTableau -> '[' NOMBRE ']'
  optTailleTableau.s = cree_n_dec_tab(optTailleTableau.h,NOMBRE);

optTailleTableau -> EPSILON
  optTailleTableau.s = cree_n_dec_var(optTailleTableau.h);

listeDecFonctions -> declarationFonction listeDecFonctions
  listeDecFonctions.s = declarationFonction.s || listeDecFonctions.s

listeDecFonctions -> EPSILON
  listeDecFonctions.s = NULL;

declarationFonction -> ID_FCT listeParam optDecVariables instructionBloc
  declarationFonction.s = cree_n_dec_fonc(ID_FCT,listeParam.s,optDecVariables.s,instructionBloc.s);

listeParam -> '(' optListeDecVariables ')'
  listeParam.s = optDecVariables.s;

optListeDecVariables -> listeDecVariables
  optDecVariables.s = listeDecVariables.s

optListeDecVariables -> EPSILON
  optListeDecVariables.s = NULL;

instruction -> instructionAffect
  instruction.s = instructionAffect.s

instruction -> instructionBloc
  instruction.s = instructionBloc.s

instruction -> instructionSi
  instruction.s = instructionSi.s

instruction -> instructionTantQue
  instruction.s = instructionTantQue.s

instruction -> instructionAppel
  instruction.s = instructionAppel.s

instruction -> instructionRetour
  instruction.s = instructionRetour.s

instruction -> instructionEcriture.s
  instruction.s = instructionEcriture.s

instruction -> instructionVide
  instruction.s = instructionVide.s

instructionAffect -> var '=' expression ';'
  instructionAffect.s = cree_n_instr_affect(var.s,expression.s);

instructionBloc -> '{' listeInstructions '}'
  instructionBloc.s = listeInstructions.s

listeInstructions -> instruction listeInstructions
  listeInstructions.s = instruction.s || listeInstructions.s

instructionSi -> SI expression ALORS instructionBloc optSinon
  instructionSi.s = cree_n_instr_si(expression.s,instructionBloc.s,optSinon.s)

optSinon -> SINON instructionBloc
  optSinon.s = instructionBloc.s

optSinon -> EPSILON
  optSinon.s = NULL;

instructionTantque -> TANTQUE expression FAIRE instructionBloc
  instructionTantque.s = cree_n_instr_tantque(expression.s,instructionBloc.s)

instructionAppel -> appelFct ';'
  instructionAppel.s = appelFct.s

instructionRetour -> RETOUR expression ';'
  instructionRetour.s = cree_n_instr_retour(expression.s)

instructionEcriture -> ECRIRE '(' expression ')' ';'
  instructionEcriture.s = cree_n_instr_ecrire(expression.s)

instructionVide -> ';'
  instructionVide.s = cree_n_instr_vide();

expression -> conjonction expressionBis
  expression.s = conjonction.s || expressionBis.s

expressionBis -> '|' conjonction expressionBis
  expressionBis.s = conjonction.s || expressionBis.s

expressionBis -> EPSILON
  expressionBis.s = NULL;

conjonction -> comparaison conjonctionBis
  conjonction.s = comparaison.s || conjonctionBis

conjonctionBis -> '&' comparaison conjonctionBis
  conjonctionBis.s = comparaison.s || conjonctionBis.s

conjonctionBis -> EPSILON
  conjonctionBis.s = NULL;

comparaison -> expArith comparaisonBis
  comparaison.s = expArith.s || comparaisonBis.s

comparaisonBis -> '=' expArith comparaisonBis
  comparaisonBis.s = expArith.s || comparaisonBis.s

comparaisonBis -> '<' expArith comparaisonBis
  comparaisonBis.s = expArith.s || comparaisonBis.s

comparaisonBis -> EPSILON
  comparaisonBis.s = NULL;

expArith -> terme expArithBis
  expArith.s = terme.s || expArith.s

expArithBis -> '+' terme expArithBis
  expArithBis.s = terme.s || expArithBis.s

expArithBis -> '-' terme expArithBis
  expArithBis.s = terme.s || expArithBis.s

expArithBis -> EPSILON
  expArithBis.s = NULL;

terme -> negation termeBis
  terme.s = negation.s termeBis.s

termeBis -> '*' negation termeBis
  termeBis.s = negation.s || termeBis

termeBis -> '/' negation termeBis
  termeBis.s = negation.s || termeBis

termeBis -> EPSILON
  termeBis.s = NULL;

negation -> '!' negation
  negation.s = negation.s

negation -> EPSILON
  negation.s = NULL;

facteur -> '(' expression ')'
  facteur.s = expression.s

facteur -> NOMBRE
  facteur.s = NOMBRE;

facteur -> appelFct
  facteur.s = appelFct.s

facteur -> var
  facteur.s = var.s

facteur -> LIRE '(' ')'
  facteur.s = cree_n_appel("LIRE",NULL);

var -> ID_VAR optIndice
  var.s = optIndice.s

optIndice -> '[' expression ']'
  optIndice.s = cree_n_var_indicee(optIndice.h,expression.s);

optIndice -> EPSILON
  optIndice.s = cree_n_var_simple(optIndice.h);

appelFct -> ID_FCT '(' listeExpressions ')'
  appelFct.s = cree_n_appel(ID_FCT,listeExpressions.s);

listeExpressions -> expression listeExpressionsBis
  listeExpressions.s = expression.s || listeExpressionsBis.s

listeExpressions -> EPSILON
  listeExpressions.s = NULL;

listeExpressionsBis -> ',' expression listeExpressionsBis
  listeExpressionsBis.s = expression.s || listeExpressionsBis.s

listeExpressionsBis -> EPSILON
  listeExpressionsBis.s = NULL;
